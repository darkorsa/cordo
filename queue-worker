#!/usr/bin/env php
<?php

use App\Register;
use Bernard\Consumer;
use Bernard\Producer;
use Noodlehaus\Config;
use Bernard\Router\ClassNameRouter;
use Bernard\Router\ContainerReceiverResolver;
use Cordo\Core\Application\Queue\MessageInterface;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Cordo\Core\Application\Error\ErrorReporterInterface;
use Cordo\Core\Application\Event\EventDispatcherAdapter;

require __DIR__ . '/bootstrap/autoload.php';

// bootstapping
$container = require __DIR__ . '/bootstrap/app.php';
$queueFactory = require __DIR__ . '/bootstrap/queue_factory.php';

$eventDispatcher = new EventDispatcherAdapter(new EventDispatcher());
$producer = new Producer($queueFactory, new EventDispatcher());

/**
 * @var Config
 */
$config = $container->get('config');

/**
 * @var ErrorReporterInterface
 */
$errorReporter = $container->get('error_reporter');

$router = new ClassNameRouter(
    Register::registerHandlersMap(),
    new ContainerReceiverResolver($container)
);

$eventDispatcher->addListener(
    Bernard\BernardEvents::INVOKE,
    function (Bernard\Event\EnvelopeEvent $envelopeEvent) {
        // log job invoked
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::ACKNOWLEDGE,
    function (Bernard\Event\EnvelopeEvent $envelopeEvent) {
        // log job processed
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::REJECT,
    function (Bernard\Event\RejectEnvelopeEvent $envelopeEvent) use ($errorReporter, $producer, $config) {
        /**
         * @var MessageInterface
         */
        $message = $envelopeEvent->getEnvelope()->getMessage();

        if ($message->fired() < $config->get('queue.tries')) {
            $message->fire();
            $producer->produce($message, $config->get('queue.default_queue'));
            return;
        }

        $errorReporter->report($envelopeEvent->getException());
    }
);

$consumer = new Consumer($router, $eventDispatcher);
$consumer->consume($queueFactory->create($config->get('queue.default_queue')));
