#!/usr/bin/env php
<?php

use Monolog\Logger;
use Bernard\Consumer;
use Bernard\Producer;
use Monolog\Handler\StreamHandler;
use Bernard\Router\ClassNameRouter;
use Bernard\Router\ContainerReceiverResolver;
use Cordo\Core\Application\Event\EventDispatcherAdapter;
use Symfony\Component\EventDispatcher\EventDispatcher;
use App\Backoffice\Users\Application\Command\SendUserWelcomeMessage;
use App\Backoffice\Users\Application\Command\Handler\SendUserWelcomeMessageHandler;

require __DIR__ . '/bootstrap/autoload.php';

// bootstapping
$container      = require __DIR__ . '/bootstrap/app.php';
$queueFactory   = require __DIR__ . '/bootstrap/queue_factory.php';

$eventDispatcher = new EventDispatcherAdapter(new EventDispatcher());
$producer = new Producer($queueFactory, new EventDispatcher());

$logger = new Logger('errorlog');
$logger->pushHandler(new StreamHandler(storage_path() . 'logs/error.log', Logger::DEBUG));

$router = new ClassNameRouter([
    SendUserWelcomeMessage::class => SendUserWelcomeMessageHandler::class,
], new ContainerReceiverResolver($container));

$eventDispatcher->addListener(
    Bernard\BernardEvents::INVOKE,
    function (Bernard\Event\EnvelopeEvent $envelopeEvent) {
        // log job invoked 
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::ACKNOWLEDGE,
    function (Bernard\Event\EnvelopeEvent $envelopeEvent) {
        // log job processed
    }
);
$eventDispatcher->addListener(
    Bernard\BernardEvents::REJECT,
    function (Bernard\Event\RejectEnvelopeEvent $envelopeEvent) use ($logger, $producer) {
        $message = $envelopeEvent->getEnvelope()->getMessage();

        if ($message->fired() < 3) {
            $message->fire();
            $producer->produce($message, 'default');
            return;
        }

        $logger->error($envelopeEvent->getException());
    }
);

$consumer = new Consumer($router, $eventDispatcher);
$consumer->consume($queueFactory->create('default'));
